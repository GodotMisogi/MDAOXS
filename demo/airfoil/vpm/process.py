from demo.airfoil.vpm.mdoComponent import *
from demo.airfoil.vpm.panelGeneration import *

from openmdao.api import Problem, Group, IndepVarComp, ScipyOptimizeDriver, NewtonSolver, ScipyKrylov, LinearBlockGS

FORCE_FILE = "/Users/gakki/Dropbox/thesis/surface_flow_sort.csv"

airfoil = Airfoil(FORCE_FILE, chord_length=1, num_samples=12, angle_of_attack=0.0)
airfoil.panelGeneration()

model = Group()
comp = IndepVarComp()
comp.add_output('y', airfoil.boundaryPoints_Y)
model.add_subsystem('input',comp)
model.add_subsystem('arcComp',ArcLengthComp(x=airfoil.boundaryPoints_X, num_panel=airfoil.NUM_SAMPLES,aoa=airfoil.aoa))
model.connect('input.y','arcComp.y')
model.add_subsystem('thetaComp',ThetaComp(x=airfoil.boundaryPoints_X,num_panel=airfoil.NUM_SAMPLES))
model.connect('input.y','thetaComp.y')
model.add_subsystem('RHSComp',RHSComp(num_panel=airfoil.NUM_SAMPLES,aoa=airfoil.aoa))
model.connect('thetaComp.theta','RHSComp.theta')
model.add_subsystem('AComp',AComp(x=airfoil.boundaryPoints_X, num_panel=airfoil.NUM_SAMPLES))
model.connect('thetaComp.theta','AComp.theta')
model.connect('input.y','AComp.y')
model.add_subsystem('BComp',BComp(x=airfoil.boundaryPoints_X, num_panel=airfoil.NUM_SAMPLES))
model.connect('input.y','BComp.y')
model.add_subsystem('CComp',CComp(num_panel=airfoil.NUM_SAMPLES))
model.connect('thetaComp.theta','CComp.theta')
model.add_subsystem('DComp',DComp(num_panel=airfoil.NUM_SAMPLES))
model.connect('thetaComp.theta','DComp.theta')
model.add_subsystem('EComp',EComp(x=airfoil.boundaryPoints_X, num_panel=airfoil.NUM_SAMPLES))
model.connect('thetaComp.theta','EComp.theta')
model.connect('input.y','EComp.y')
model.add_subsystem('FComp',FComp(num_panel=airfoil.NUM_SAMPLES))
model.connect('AComp.A','FComp.A')
model.connect('BComp.B','FComp.B')
model.connect('arcComp.S','FComp.S')
model.add_subsystem('GComp',GComp(num_panel=airfoil.NUM_SAMPLES))
model.connect('AComp.A','GComp.A')
model.connect('BComp.B','GComp.B')
model.connect('EComp.E','GComp.E')
model.connect('arcComp.S','GComp.S')
model.add_subsystem('PComp',PComp(x=airfoil.boundaryPoints_X,num_panel=airfoil.NUM_SAMPLES))
model.connect('input.y','PComp.y')
model.connect('thetaComp.theta','PComp.theta')
model.add_subsystem('QComp',QComp(x=airfoil.boundaryPoints_X,num_panel=airfoil.NUM_SAMPLES))
model.connect('input.y','QComp.y')
model.connect('thetaComp.theta','QComp.theta')
model.add_subsystem('CN2Comp',CN2Comp(num_panel=airfoil.NUM_SAMPLES))
model.connect('AComp.A','CN2Comp.A')
model.connect('CComp.C','CN2Comp.C')
model.connect('DComp.D','CN2Comp.D')
model.connect('EComp.E','CN2Comp.E')
model.connect('FComp.F','CN2Comp.F')
model.connect('GComp.G','CN2Comp.G')
model.connect('QComp.Q','CN2Comp.Q')
model.connect('arcComp.S','CN2Comp.S')
model.add_subsystem('CN1Comp',CN1Comp(num_panel=airfoil.NUM_SAMPLES))
model.connect('CComp.C','CN1Comp.C')
model.connect('DComp.D','CN1Comp.D')
model.connect('FComp.F','CN1Comp.F')
model.connect('GComp.G','CN1Comp.G')
model.connect('CN2Comp.CN2','CN1Comp.CN2')
model.add_subsystem('ANComp',ANComp(num_panel=airfoil.NUM_SAMPLES))
model.connect('CN1Comp.CN1','ANComp.CN1')
model.connect('CN2Comp.CN2','ANComp.CN2')
model.add_subsystem('GammaComp',GammaComp(num_panel=airfoil.NUM_SAMPLES))
model.connect('ANComp.AN','GammaComp.AN')
model.connect('RHSComp.RHS','GammaComp.RHS')


model.add_subsystem('CT2Comp',CT2Comp(num_panel=airfoil.NUM_SAMPLES))
model.connect('AComp.A','CT2Comp.A')
model.connect('CComp.C','CT2Comp.C')
model.connect('DComp.D','CT2Comp.D')
model.connect('EComp.E','CT2Comp.E')
model.connect('FComp.F','CT2Comp.F')
model.connect('GComp.G','CT2Comp.G')
model.connect('PComp.P','CT2Comp.P')
model.connect('arcComp.S','CT2Comp.S')
model.add_subsystem('CT1Comp',CT1Comp(num_panel=airfoil.NUM_SAMPLES))
model.connect('CComp.C','CT1Comp.C')
model.connect('DComp.D','CT1Comp.D')
model.connect('FComp.F','CT1Comp.F')
model.connect('GComp.G','CT1Comp.G')
model.connect('CT2Comp.CT2','CT1Comp.CT2')
model.add_subsystem('ATComp',ATComp(num_panel=airfoil.NUM_SAMPLES))
model.connect('CT1Comp.CT1','ATComp.CT1')
model.connect('CT2Comp.CT2','ATComp.CT2')

model.add_subsystem('VelocityComp',VelocityComp(num_panel=airfoil.NUM_SAMPLES,aoa=airfoil.aoa))
model.connect('GammaComp.gamma','VelocityComp.gamma')
model.connect('thetaComp.theta','VelocityComp.theta')
model.connect('ATComp.AT','VelocityComp.AT')

model.add_subsystem('LiftComp',LiftComp(num_panel=airfoil.NUM_SAMPLES))
model.connect('VelocityComp.V','LiftComp.V')
model.connect('arcComp.S','LiftComp.S')

model.add_design_var('input.y')
model.add_objective('LiftComp.CL')
leftmost_id = int(airfoil.NUM_SAMPLES/2)
model.add_constraint('input.y',indices=[0,leftmost_id,-1],equals=[airfoil.boundaryPoints_Y[0],airfoil.boundaryPoints_Y[leftmost_id],airfoil.boundaryPoints_Y[-1]])
prob = Problem(model=model)



prob.driver = ScipyOptimizeDriver()
prob.driver.options['optimizer'] = 'SLSQP'
prob.driver.options['maxiter'] = 300
prob.driver.options['tol'] = 1e-6
prob.set_solver_print(level=0)
prob.model.approx_totals()
prob.setup()

prob.run_driver()
airfoil.Get_PanelCoefficients()
print(airfoil.full_coefficientLift)

plt.plot(airfoil.boundaryPoints_X, prob['input.y'],'-.',label='original')
plt.plot(airfoil.boundaryPoints_X, airfoil.boundaryPoints_Y, '-x',label='changed')
plt.title(s='Changes using vertex panel method with 12 nodes')
plt.legend()
plt.savefig(fname='resultVP')
print(np.array(prob['input.y'])-np.array(airfoil.boundaryPoints_Y))